<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Js on Baykier的鱼塘</title>
    <link>http://i90.xyz/tags/js/</link>
    <description>Recent content in Js on Baykier的鱼塘</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 11 Sep 2017 08:50:38 +0000</lastBuildDate>
    
	<atom:link href="http://i90.xyz/tags/js/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JavaScript跨域访问控制问题</title>
      <link>http://i90.xyz/post/js_cors/</link>
      <pubDate>Mon, 11 Sep 2017 08:50:38 +0000</pubDate>
      
      <guid>http://i90.xyz/post/js_cors/</guid>
      <description> JavaScript跨域访问控制问题 问题描述  情景一由于公司的文件上传采用单独的文件服务器管理，把上传文件操作做了统一抽象，形成了一个API接口，不管是前端（包括APP）， 后端，采用文件上传时，均采用一个接口，重要的是文件上传API地址是单独的一台服务器。对于后端和APP端来说，还好 ，但是对于前端（H5）来说，就存在跨域的请求问题
 情景二作为前端开发(H5),本地搭建测试环境，例如http://localhost，链接测试环境的接口http://test.xxxxx.com,这时候，由于 请求的也不是同一个服务器，也会存在跨域问题
  什么是跨域访问 当一个资源从与该资源本身所在的服务器不同的域或端口请求一个资源时，资源会发起一个跨域 HTTP 请求
如何解决跨域请求问题 要解决跨域问题，有两种方式:
 配置服务器，添加允许的跨域访问域名，从而使浏览器正常接收ajax返回的数据  server { listen 80; server_name test.com; location /{ add_header &#39;Access-Control-Allow-Origin&#39; &#39;http://a.com&#39;; add_header &#39;Access-Control-Allow-Credentials&#39; &#39;true&#39;; add_header &#39;Access-Control-Allow-Methods&#39; &#39;POST&#39;; } }   如果后端使用php，则可以在index.php入口文件简单修改:  // 指定允许其他域名访问 header(&#39;Access-Control-Allow-Origin:http:localhost&#39;); header(&#39;Access-Control-Allow-Credentials:true&#39;); // 响应类型 header(&#39;Access-Control-Allow-Methods:POST&#39;); // 响应头设置 header(&#39;Access-Control-Allow-Headers:x-requested-with,content-type&#39;);  相关阅读  HTTP跨域访问控制 PHP 解决 CORS 跨域问题  </description>
    </item>
    
  </channel>
</rss>